import { ClassNameHelper } from "./classname_helper";
// Generated by CodiumAI

describe("ClassNameHelper", () => {
  // Tests that the parse method correctly parses a single class name with the default tag
  it("should correctly parse a single class name with the default tag", () => {
    const className = "max-w-[80rem]";
    const dict = new ClassNameHelper().parse(className).end();
    expect(dict["default"].length).toBe(1);
    expect(dict["default"][0].className).toBe(className);
    expect(dict["default"][0].value).toBe(className);
    expect(dict["default"][0].prefix).toBe("max-w");
    expect(dict["default"][0].suffix).toBe("[80rem]");
  });

  // Tests that the parse method correctly parses multiple class names with different tags
  it("should correctly parse multiple class names with different tags", () => {
    const className = "max-w-[80rem] lg:max-w-[60rem]";
    const dict = new ClassNameHelper().parse(className).end();
    expect(dict["default"].length).toBe(1);
    expect(dict["lg"].length).toBe(1);
    expect(dict["default"][0].className).toBe("max-w-[80rem]");
    expect(dict["default"][0].value).toBe("max-w-[80rem]");
    expect(dict["default"][0].prefix).toBe("max-w");
    expect(dict["default"][0].suffix).toBe("[80rem]");
    expect(dict["lg"][0].className).toBe("lg:max-w-[60rem]");
    expect(dict["lg"][0].value).toBe("max-w-[60rem]");
    expect(dict["lg"][0].prefix).toBe("max-w");
    expect(dict["lg"][0].suffix).toBe("[60rem]");
  });

  // Tests that the parse method correctly parses class names with different prefixes and suffixes
  it("should correctly parse class names with different prefixes and suffixes", () => {
    const className = "max-w-[80rem] px-[12px] lg:mr-[24px] lg:ml-[24px] lg:mt-[24px] lg:mb-[24px]";
    const dict = new ClassNameHelper().parse(className).end();
    expect(dict["default"].length).toBe(2);
    expect(dict["lg"].length).toBe(4);
    expect(dict["default"][0].className).toBe("max-w-[80rem]");
    expect(dict["default"][0].value).toBe("max-w-[80rem]");
    expect(dict["default"][0].prefix).toBe("max-w");
    expect(dict["default"][0].suffix).toBe("[80rem]");
    expect(dict["default"][1].className).toBe("px-[12px]");
    expect(dict["default"][1].value).toBe("px-[12px]");
    expect(dict["default"][1].prefix).toBe("px");
    expect(dict["default"][1].suffix).toBe("[12px]");
    expect(dict["lg"][0].className).toBe("lg:mr-[24px]");
    expect(dict["lg"][0].value).toBe("mr-[24px]");
    expect(dict["lg"][0].prefix).toBe("mr");
    expect(dict["lg"][0].suffix).toBe("[24px]");
    expect(dict["lg"][1].className).toBe("lg:ml-[24px]");
    expect(dict["lg"][1].value).toBe("ml-[24px]");
    expect(dict["lg"][1].prefix).toBe("ml");
    expect(dict["lg"][1].suffix).toBe("[24px]");
    expect(dict["lg"][2].className).toBe("lg:mt-[24px]");
    expect(dict["lg"][2].value).toBe("mt-[24px]");
    expect(dict["lg"][2].prefix).toBe("mt");
    expect(dict["lg"][2].suffix).toBe("[24px]");
    expect(dict["lg"][3].className).toBe("lg:mb-[24px]");
    expect(dict["lg"][3].value).toBe("mb-[24px]");
    expect(dict["lg"][3].prefix).toBe("mb");
    expect(dict["lg"][3].suffix).toBe("[24px]");
  });

  // Tests that the getClassNameObjects method correctly retrieves class name objects for a specific tag
  it("should correctly retrieve class name objects for a specific tag", () => {
    const className = "max-w-[80rem] lg:max-w-[60rem]";
    const dict = new ClassNameHelper().parse(className).end();
    const objects = new ClassNameHelper().parse(className).getClassNameObjects("lg");
    expect(Object.keys(objects).length).toBe(1);
    expect(objects["max-w"]).toEqual({
      className: "lg:max-w-[60rem]",
      value: "max-w-[60rem]",
      prefix: "max-w",
      suffix: "[60rem]",
    });
  });

  // Tests that the getClassNameObjects method correctly retrieves class name objects for the default tag
  it("should correctly retrieve class name objects for the default tag", () => {
    const className = "max-w-[80rem] lg:max-w-[60rem]";
    const dict = new ClassNameHelper().parse(className).end();
    const objects = new ClassNameHelper().parse(className).getClassNameObjects("default");
    expect(Object.keys(objects).length).toBe(1);
    expect(objects["max-w"]).toEqual({
      className: "max-w-[80rem]",
      value: "max-w-[80rem]",
      prefix: "max-w",
      suffix: "[80rem]",
    });
  });

  // Tests that the parse method correctly handles an empty string input
  it("should correctly handle an empty string input", () => {
    const className = "";
    const dict = new ClassNameHelper().parse(className).end();
    expect(Object.keys(dict).length).toBe(6);
    expect(dict["default"].length).toBe(0);
    expect(dict["sm"].length).toBe(0);
    expect(dict["md"].length).toBe(0);
    expect(dict["lg"].length).toBe(0);
    expect(dict["xl"].length).toBe(0);
    expect(dict["2xl"].length).toBe(0);
  });
});
